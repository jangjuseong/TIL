# 15장 이진 탐색 트리로 속도 향상

순서를 유지하면서도 빠른 검색과 삽입, 삭제가 가능한 자료 구조가 필요하면 어떻게 해야할까? 이진 탐색 트리로 들어가 보자

# 15.1 트리

트리(tree) 역시 노드 기반 자료 구조이지만 트리의 각 노드는 여러 노드로의 링크를 포함할 수 있다. 

트리에 쓰이는 고유한 용어를 알아보자.

![IMG_0885.heic](15%E1%84%8C%E1%85%A1%E1%86%BC%20%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%B5%E1%86%AB%20%E1%84%90%E1%85%A1%E1%86%B7%E1%84%89%E1%85%A2%E1%86%A8%20%E1%84%90%E1%85%B3%E1%84%85%E1%85%B5%E1%84%85%E1%85%A9%20%E1%84%89%E1%85%A9%E1%86%A8%E1%84%83%E1%85%A9%20%E1%84%92%E1%85%A3%E1%86%BC%E1%84%89%E1%85%A1%E1%86%BC%20e5aec24d9c0f4f239b0e77a41375b65f/IMG_0885.heic)

- 가장 상위 노드(예제에서는 “j”)를 `루트(root)`라 부른다. 루트는 보다시피 트리의 꼭대기다. 전형적으로 트리를 묘사하는 방식이다.
- 예제에서 “j”를 “m”과 “b”의 `부모(parent)`라 한다. 반대로 “m”과 “b”는 “j”의 자식이다. 이와 비슷하게 “m”은 “q”와 “z”의 부모이며, “q”와 “z”는 “m”의 자식이다.
- 패밀리 트리에는 노드에 `자손(descendant)`와 `조상(ancestor)`이 있을 수 있다. 한 노드의 자손은 그 노드에서 생겨난 모든 노드이며, 한 노드의 조상은 그 노드를 생겨나게 한 모든 노드다. 예제에서 “j”는 트리 내 나머지 노드의 조상이고 따라서 나머지 모든 노드는 “j”의 자손이다.
- 트리에는 `레벨(level)`이 있다. 각 레벨은 트릴에서 같은 줄(row)이다. 예제 트리는 세 레벨이다.
- 트리의 프로퍼티(property)는 `균형 잡힌` 정도를 말한다. 모든 노드에서 하위 트리의 노드 개수가 같으면 그 트리는 `균형(balanced) 트리`다.
- 반면 다음의 트리는 불균형(imbalanced) 트리다.
    
    ![IMG_0886.heic](15%E1%84%8C%E1%85%A1%E1%86%BC%20%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%B5%E1%86%AB%20%E1%84%90%E1%85%A1%E1%86%B7%E1%84%89%E1%85%A2%E1%86%A8%20%E1%84%90%E1%85%B3%E1%84%85%E1%85%B5%E1%84%85%E1%85%A9%20%E1%84%89%E1%85%A9%E1%86%A8%E1%84%83%E1%85%A9%20%E1%84%92%E1%85%A3%E1%86%BC%E1%84%89%E1%85%A1%E1%86%BC%20e5aec24d9c0f4f239b0e77a41375b65f/IMG_0886.heic)
    

# 15.2 이진 탐색 트리

`이진 탐색 트리(binary search tree)`는 트리에 `이진(binary)`과 `탐색(search)`라는 수식어 두 개가 붙는다. 이진 트리는 각 노드에 자식이 0개나 1개, 2개다. 

이진 탐색 트리는 다음의 규칙이 추가된 트리다.

- 각 노드의 자식은 최대 “왼쪽”에 하나, “오른쪽”에 하나다.
- 한 노드의 “왼쪽” 자손은 그 노드보다 작은 값만 포함도리 수 있다. 마찬가지로 “오른쪽” 자손은 그 노드보다 큰 값만 포함될 수 있다.

### 하나의 트리 노드를 JavaScript로 표현하기

```jsx
class TreeNode {
    constructor(val, left = null, right = null) {
        this.value = val;
        this.leftChild = left;
        this.rightChild = right;
    }
}

node1 = TreeNode(25)
node2 = TreeNode(75)
root = Treenode(50, node1, node2)
```

# 15.3 검색

다음은 이진 탐색 트리를 검색하는 알고리즘이다.

1. 노드를 “현재 노드”로 지정한다(알고리즘을 시작할 때는 루트 노드가 첫 번째 “현재 노드”다).
2. 현재 노드의 값을 확인한다.
3. 찾고 있는 값이면 좋다!
4. 찾고 있는 값이 현재 노드보다 작으면 왼쪽 하위 트리를 검색한다.
5. 찾고 있는 값이 현재 노드보다 크면 오른쪽 하위 트리를 검색한다.
6. 찾고 있는 값을 찾았거나 트리 바닥에 닿을 때 까지(찾고 있는 값이 트리에 없는 경우) 1단계부터 5단계를 반복한다.

## 15.3.1 이진 탐색 트리 검색의 효율성

이진 탐색 트리에서는 각 단계마다 검색할 대상이 남은 노드의 반으로 줄어든다. 따라서 이진 탐색 트리 검색은 각 단계마다 남은 값 중 반을 제거하는 모든 알고리즘을 나타내는 O(logN)이다(물론 뒤이어 설명할 최선의 시나리오인 포화 균형 이진 탐색 트리에서만 그렇다.)

## 15.3.2 log(N) 레벨

이진 탐색 트리 검색이 왜 O(logN)인지 다른 방식으로도 설명할 수 있다. 이 설명을 통해 균형 이진 트리에 노드가 N개면 레벨(즉, 줄)이 약 logN개라는 이진 트리의 또 다른 일반적 속성이 밝혀진다.

이처럼 이진 타맥 트리 검색은 O(logN)인데 이는 정렬된 배열의 이진 검색도 마찬가지다. 이러한 면에서 이진 탐색 트리 검색은 정렬된 배열의 이진 검색과 효율성이 같다.

하지만 삽입에 있어서는 정렬된 배열보다 이진 트리가 훨씬 뛰어나다. 곧 알아보겠다.

## 15.3.3 코드 구현: 이진 탐색 트리 검색

검색 연산뿐 아니라 앞으로 다른 이진 탐색 트리 연산을 구현할 때도 재귀를 많이 활용할 것이다.

10장 재귀를 사용한 재귀적 반복에서 배웠듯이 재귀는 임의의 깊이만큼 들어가야 하는 자료 구조를 다룰 때 꼭 필요하다. 레벨이 무한한 트리가 바로 그러한 자료 구조다.

재귀를 사용해 검색을 자바스크립트로 구현하면 다음과 같다.

```jsx
function search(searchValue, node) {
    if (node === null || node.value === searchValue) {
        return node;
    } else if (searchValue < node.value) {
        return search(searchValue, node.leftChild);
    } else {  // searchValue > node.value
        return search(searchValue, node.rightChild);
    }
}
```

# 15.4 삽입

앞서 언급했듯이 이진 탐색 트리는 삽입에 가장 뛰어나다. 첫번째로 해야 할 일은 삽입할 값을 붙일 올바른 노드를 찾는 것이다.

이진 탐색 트리에서 십입은 logN + 1단계가 걸리며 빅 오는 상수를 무시하므로 O(logN)이다.

정렬된 배열에서는 검색에 O(logN) + 삽입에 O(N)이 걸린다.

## 15.4.1 코드 구현: 이진 탐색 트리 삽입

```jsx
function insert(value, node) {
    if (value < node.value) {
        if (node.leftChild === null) {
            node.leftChild = new TreeNode(value);
        } else {
            insert(value, node.leftChild);
        }
    } else if (value > node.value) {
        if (node.rightChild === null) {
            node.rightChild = new TreeNode(value);
        } else {
            insert(value, node.rightChild);
        }
    }
}
```

## 15.4.2 삽입 순서

한 가지 알아둘 점은 무작위로 정렬된 데이터로 트리를 생성해야 대게 균형 잡힌 트리가 생성된다는 점이다. 반대로 정렬된 데이터를 트리에 삽입하면 불균형이 심하고 덜 효율적일 수 있다.

# 15.5 삭제

삭제는 이진 탐색 트리에서 가장 어려운 연산이며 주의 깊게 실행해야 한다. 

지금까지 배운 삭제 알고리즘은 다음과 같은 규칙을 따른다.

- 삭제할 노드에 자식이 없으면 그냥 삭제한다
- 삭제할 노드에 자식이 하나면 노드를 삭제하고 그 자식을 삭제된 노드가 있던 위치에 넣는다.

## 15.5.1 자식이 둘인 노드 삭제

- 자식이 둘인 노드를 삭제할 때는 삭제된 노드를 후속자(successor) 노드로 대체한다. 후속자 노드란 삭제된 노드보다 큰 값 중 최솟값을 갖는 자식 노드다.

## 15.5.2 후속자 노드 찾기

컴퓨터가 후속자 노드를 찾는 알고리즘

- 삭제된 값의 오른쪽 자식을 방문해서 그 자식의 왼쪽 자식을 따라 계속해서 방문하며 더 이상 왼쪽 자식이 없을 때 까지 내려간다. 바닥(bottom)값이 후속자 노드다.

## 15.5.3 오른쪽 자식이 있는 후속자 노드

- 만약 후속자 노드에 오른쪽 자식이 있으면 후속자 노드를 삭제된 노드가 있던 자리에 넣은 후, 후속자 노드의 오른쪽 자식을 후속자 노드의 원래 부모의 왼쪽 자식으로 넣는다.

## 15.5.4 완전한 삭제 알고리즘

모든 단계를 종합하면 이진 탐색 트리의 삭제 알고리즘은 다음과 같다.

- 삭제할 노드에 자식이 없으면 그냥 삭제한다
- 삭제할 노드에 자식이 하나면 노드를 삭제하고 그 자식을 삭제된 노드가 있던 위치에 넣는다.
- 자식이 둘인 노드를 삭제할 때는 삭제된 노드를 후속자(successor) 노드로 대체한다. 후속자 노드란 **삭제된 노드보다 큰 값 중 최솟값을 갖는 자식 노드**다.
- 후속자 노드를 찾으려면 삭제된 값의 오른쪽 자식을 방문해서 그 자식의 왼쪽 자식을 따라 계속해서 방문하며 더 이상 왼쪽 자식이 없을 때 까지 내려간다. 바닥(bottom)값이 후속자 노드다.
- 만약 후속자 노드에 오른쪽 자식이 있으면 후속자 노드를 삭제된 노드가 있던 자리에 넣은 후, 후속자 노드의 오른쪽 자식을 **후속자 노드의 원래 부모의 왼쪽 자식**으로 넣는다.

## 15.5.5 코드 구현: 이진 탐색 트리 삭제

```jsx
function deleteNode(valueToDelete, node) {
    if (node === null) {
        return null;
    } else if (valueToDelete < node.value) {
        node.leftChild = deleteNode(valueToDelete, node.leftChild);
        return node;
    } else if (valueToDelete > node.value) {
        node.rightChild = deleteNode(valueToDelete, node.rightChild);
        return node;
    } else {  // valueToDelete === node.value
        if (node.leftChild === null) {
            return node.rightChild;
        } else if (node.rightChild === null) {
            return node.leftChild;
        } else {
            node.rightChild = lift(node.rightChild, node);
            return node;
        }
    }
}

function lift(node, nodeToDelete) {
    if (node.leftChild) {
        node.leftChild = lift(node.leftChild, nodeToDelete);
        return node;
    } else {
        nodeToDelete.value = node.value;
        return node.rightChild;
    }
}
```

vlaueToDelete가 현재 node 값보다 작으면 valueToDelete가 트리 어딘가에 있다고 가정했을 때 현재 node의 왼쪽 자손 중에 있을 것이다.

이 때 기발하게 현재 node의 왼쪽 자식을 현재 node의 왼쪽 자식에 대해 재귀적으로 delete 함수를 호출한 결과로 `덮어쓴다`. delete 함수 자체가 궁극적으로 노드를 반환하니 이 결과를 가져와 현재 node의 왼쪽 자식으로 넣는다.

하지만 왼쪽 자식에 대한 delete 호출이 자기 자신을 반환할 수 있기 때문에 이렇게 “덮어쓰기”를 해도 실제 왼쪽 자식이 바뀌지 않을 때가 많다.

## 15.5.6 이진 탐색 트리 삭제의 효율성

검색과 삽입처럼 트리 삭제도 일반적으로 O(logN)이다. 삭제에는 검색 한 번과 연결이 끊긴 자식을 처리하는 단계가 추가적으로 필요하기 때문이다.

# 15.6 이진 탐색 트리 다뤄보기

이진 탐색 트리는 데이터 삽입과 삭제가 훨씬 빠르므로 데이터를 자주 수정할 경우 특히 효율적이다.

# 15.7 이진 탐색 트리 순회

자료 구조에서 모든 노드를 방문하는 과정을 자료 구조 `순회(traversal)`라 부른다.

리스트를 순서대로 출력할 수 있도록 트리를 알파벳 오름차순으로 순회할 수 있어야 한다. 트리를 순회하는 방법은 여러 가지인데,이 애플리케이션에서는 각 제목을 알파벳 순으로 출력할 수 있도록 `중위 순회(inorder traversal)`라 알려진 방법을 수행하겠다.

1. 노드의 왼쪽 자식에 함수(traverse)를 재귀적으로 호출한다. 왼쪽 자식이 없는 노드에 닿을 때까지 함수를 계속 호출한다.
2. 노드를 “방문”한다
3. 노드의 오른쪽 자식에 함수(traverse)를 재귀적으로 호출한다. 오른쪽 자식이 없는 노드에 닿을 때까지 함수를 계속 호출한다.

```jsx
function traverseAndPrint(node) {
    if (node === null) {
        return;
    }
    traverseAndPrint(node.leftChild);
    console.log(node.value);
    traverseAndPrint(node.rightChild);
}
```

이러한 방식으로 순회는 트리의 노드를 N개를 모두 방문하므로 트리 순회는 O(N)이 걸린다.